=================== Yao.LuxurySparse.IMatrix{256,Bool}-Yao.LuxurySparse.IMatrix{256,Bool} ====================
BenchmarkTools.Trial: 
  memory estimate:  160 bytes
  allocs estimate:  3
  --------------
  minimum time:     5.935 μs (0.00% GC)
  median time:      6.052 μs (0.00% GC)
  mean time:        6.278 μs (0.00% GC)
  maximum time:     16.508 μs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     6
=================== Yao.LuxurySparse.IMatrix{256,Bool}-SparseMatrixCSC{Complex{Float64},Int64} ====================
BenchmarkTools.Trial: 
  memory estimate:  3.00 MiB
  allocs estimate:  9
  --------------
  minimum time:     298.736 μs (0.00% GC)
  median time:      345.360 μs (0.00% GC)
  mean time:        396.353 μs (10.17% GC)
  maximum time:     1.149 ms (46.45% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Yao.LuxurySparse.IMatrix{256,Bool}-Array{Complex{Float64},2} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.53 MiB
  allocs estimate:  8
  --------------
  minimum time:     230.556 μs (0.00% GC)
  median time:      262.462 μs (0.00% GC)
  mean time:        296.411 μs (7.35% GC)
  maximum time:     977.783 μs (51.42% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Yao.LuxurySparse.IMatrix{256,Bool}-Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.50 MiB
  allocs estimate:  5
  --------------
  minimum time:     229.195 μs (0.00% GC)
  median time:      256.697 μs (0.00% GC)
  mean time:        295.823 μs (7.48% GC)
  maximum time:     1.223 ms (68.27% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Yao.LuxurySparse.IMatrix{256,Bool}-Diagonal{Complex{Float64}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.00 MiB
  allocs estimate:  3
  --------------
  minimum time:     142.120 μs (0.00% GC)
  median time:      161.630 μs (0.00% GC)
  mean time:        184.080 μs (7.80% GC)
  maximum time:     785.124 μs (61.73% GC)
  --------------
  samples:          10000
  evals/sample:     1
0-element BenchmarkTools.BenchmarkGroup:
  tags: []=================== SparseMatrixCSC{Complex{Float64},Int64}-Yao.LuxurySparse.IMatrix{256,Bool} ====================
BenchmarkTools.Trial: 
  memory estimate:  2.00 MiB
  allocs estimate:  7
  --------------
  minimum time:     404.895 μs (0.00% GC)
  median time:      415.658 μs (0.00% GC)
  mean time:        470.112 μs (6.57% GC)
  maximum time:     1.331 ms (33.90% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== SparseMatrixCSC{Complex{Float64},Int64}-SparseMatrixCSC{Complex{Float64},Int64} ====================
BenchmarkTools.Trial: 
  memory estimate:  2.00 MiB
  allocs estimate:  7
  --------------
  minimum time:     2.106 ms (0.00% GC)
  median time:      2.126 ms (0.00% GC)
  mean time:        2.188 ms (1.69% GC)
  maximum time:     2.900 ms (14.65% GC)
  --------------
  samples:          2282
  evals/sample:     1
=================== SparseMatrixCSC{Complex{Float64},Int64}-Array{Complex{Float64},2} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.54 MiB
  allocs estimate:  14
  --------------
  minimum time:     442.845 μs (0.00% GC)
  median time:      448.012 μs (0.00% GC)
  mean time:        489.728 μs (5.01% GC)
  maximum time:     1.204 ms (39.21% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== SparseMatrixCSC{Complex{Float64},Int64}-Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}} ====================
BenchmarkTools.Trial: 
  memory estimate:  2.00 MiB
  allocs estimate:  8
  --------------
  minimum time:     571.534 μs (0.00% GC)
  median time:      578.899 μs (0.00% GC)
  mean time:        636.841 μs (4.91% GC)
  maximum time:     1.613 ms (33.28% GC)
  --------------
  samples:          7828
  evals/sample:     1
=================== SparseMatrixCSC{Complex{Float64},Int64}-Diagonal{Complex{Float64}} ====================
BenchmarkTools.Trial: 
  memory estimate:  2.00 MiB
  allocs estimate:  11
  --------------
  minimum time:     539.367 μs (0.00% GC)
  median time:      546.634 μs (0.00% GC)
  mean time:        604.504 μs (5.32% GC)
  maximum time:     1.553 ms (28.64% GC)
  --------------
  samples:          8244
  evals/sample:     1
0-element BenchmarkTools.BenchmarkGroup:
  tags: []=================== Array{Complex{Float64},2}-Yao.LuxurySparse.IMatrix{256,Bool} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.54 MiB
  allocs estimate:  40
  --------------
  minimum time:     234.442 μs (0.00% GC)
  median time:      261.926 μs (0.00% GC)
  mean time:        300.498 μs (8.49% GC)
  maximum time:     1.084 ms (54.42% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Array{Complex{Float64},2}-SparseMatrixCSC{Complex{Float64},Int64} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.54 MiB
  allocs estimate:  14
  --------------
  minimum time:     1.268 ms (0.00% GC)
  median time:      1.279 ms (0.00% GC)
  mean time:        1.327 ms (2.15% GC)
  maximum time:     2.113 ms (25.39% GC)
  --------------
  samples:          3762
  evals/sample:     1
=================== Array{Complex{Float64},2}-Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.53 MiB
  allocs estimate:  9
  --------------
  minimum time:     234.059 μs (0.00% GC)
  median time:      261.921 μs (0.00% GC)
  mean time:        298.979 μs (8.33% GC)
  maximum time:     960.390 μs (57.20% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Array{Complex{Float64},2}-Diagonal{Complex{Float64}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.54 MiB
  allocs estimate:  12
  --------------
  minimum time:     237.895 μs (0.00% GC)
  median time:      262.518 μs (0.00% GC)
  mean time:        301.387 μs (8.41% GC)
  maximum time:     981.726 μs (54.21% GC)
  --------------
  samples:          10000
  evals/sample:     1
0-element BenchmarkTools.BenchmarkGroup:
  tags: []=================== Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}}-Yao.LuxurySparse.IMatrix{256,Bool} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.50 MiB
  allocs estimate:  5
  --------------
  minimum time:     228.542 μs (0.00% GC)
  median time:      253.024 μs (0.00% GC)
  mean time:        286.836 μs (8.37% GC)
  maximum time:     966.630 μs (55.59% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}}-SparseMatrixCSC{Complex{Float64},Int64} ====================
BenchmarkTools.Trial: 
  memory estimate:  2.00 MiB
  allocs estimate:  8
  --------------
  minimum time:     305.248 μs (0.00% GC)
  median time:      339.137 μs (0.00% GC)
  mean time:        388.076 μs (8.33% GC)
  maximum time:     1.214 ms (48.86% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}}-Array{Complex{Float64},2} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.53 MiB
  allocs estimate:  9
  --------------
  minimum time:     235.389 μs (0.00% GC)
  median time:      261.719 μs (0.00% GC)
  mean time:        302.828 μs (8.65% GC)
  maximum time:     1.117 ms (53.46% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}}-Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.50 MiB
  allocs estimate:  11
  --------------
  minimum time:     227.187 μs (0.00% GC)
  median time:      245.690 μs (0.00% GC)
  mean time:        287.256 μs (8.44% GC)
  maximum time:     1.021 ms (56.15% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}}-Diagonal{Complex{Float64}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.50 MiB
  allocs estimate:  14
  --------------
  minimum time:     227.234 μs (0.00% GC)
  median time:      245.774 μs (0.00% GC)
  mean time:        284.518 μs (8.49% GC)
  maximum time:     965.514 μs (50.71% GC)
  --------------
  samples:          10000
  evals/sample:     1
0-element BenchmarkTools.BenchmarkGroup:
  tags: []=================== Diagonal{Complex{Float64}}-Yao.LuxurySparse.IMatrix{256,Bool} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.00 MiB
  allocs estimate:  3
  --------------
  minimum time:     143.052 μs (0.00% GC)
  median time:      162.233 μs (0.00% GC)
  mean time:        186.887 μs (8.73% GC)
  maximum time:     866.622 μs (64.23% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Diagonal{Complex{Float64}}-SparseMatrixCSC{Complex{Float64},Int64} ====================
BenchmarkTools.Trial: 
  memory estimate:  2.00 MiB
  allocs estimate:  11
  --------------
  minimum time:     307.610 μs (0.00% GC)
  median time:      339.718 μs (0.00% GC)
  mean time:        386.195 μs (8.50% GC)
  maximum time:     1.198 ms (50.35% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Diagonal{Complex{Float64}}-Array{Complex{Float64},2} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.54 MiB
  allocs estimate:  12
  --------------
  minimum time:     235.803 μs (0.00% GC)
  median time:      263.570 μs (0.00% GC)
  mean time:        302.099 μs (8.63% GC)
  maximum time:     1.052 ms (55.28% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Diagonal{Complex{Float64}}-Yao.LuxurySparse.PermMatrix{Complex{Float64},Int64,Array{Complex{Float64},1},Array{Int64,1}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.50 MiB
  allocs estimate:  14
  --------------
  minimum time:     209.171 μs (0.00% GC)
  median time:      246.155 μs (0.00% GC)
  mean time:        284.861 μs (8.62% GC)
  maximum time:     977.066 μs (53.32% GC)
  --------------
  samples:          10000
  evals/sample:     1
=================== Diagonal{Complex{Float64}}-Diagonal{Complex{Float64}} ====================
BenchmarkTools.Trial: 
  memory estimate:  1.00 MiB
  allocs estimate:  9
  --------------
  minimum time:     151.872 μs (0.00% GC)
  median time:      160.725 μs (0.00% GC)
  mean time:        186.461 μs (8.79% GC)
  maximum time:     866.017 μs (58.52% GC)
  --------------
  samples:          10000
  evals/sample:     1
0-element BenchmarkTools.BenchmarkGroup:
  tags: []